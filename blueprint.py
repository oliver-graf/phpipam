# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated blueprint DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa


# Secret Variables
BP_CRED_CENTOS_KEY = read_local_file("BP_CRED_CENTOS_KEY")
Service_phpipam_variable_DBPassword = read_local_file(
    "Service_phpipam_variable_DBPassword"
)

# Credentials
BP_CRED_CENTOS = basic_cred(
    "centos",
    BP_CRED_CENTOS_KEY,
    name="CENTOS",
    type="KEY",
    default=True,
)


class phpipam(Service):

    DBPassword = CalmVariable.Simple.Secret(
        Service_phpipam_variable_DBPassword,
        label="",
        is_mandatory=False,
        is_hidden=False,
        runtime=True,
        description="",
    )


class vmcalm_array_indexcalm_timeResources(AhvVmResources):

    memory = 1
    vCPUs = 1
    cores_per_vCPU = 2
    disks = [
        AhvVmDisk.Disk.Scsi.cloneFromImageService(
            "CentOS-7-x86_64-GenericCloud-2009", bootable=True
        )
    ]
    nics = [AhvVmNic.NormalNic.ingress("NutanixLAN_IPAM", cluster="ntnxcl01")]

    guest_customization = AhvVmGC.CloudInit(
        filename=os.path.join(
            "specs", "vmcalm_array_indexcalm_time_cloud_init_data.yaml"
        )
    )


class vmcalm_array_indexcalm_time(AhvVm):

    name = "vm-@@{calm_array_index}@@-@@{calm_time}@@"
    resources = vmcalm_array_indexcalm_timeResources


class Ipadressmanagment(Substrate):

    os_type = "Linux"
    provider_type = "AHV_VM"
    provider_spec = vmcalm_array_indexcalm_time

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=True,
        retries="5",
        connection_port=22,
        address="@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@",
        delay_secs="0",
        credential=ref(BP_CRED_CENTOS),
    )


class PackageInstall(Package):

    name = "Package Install"
    services = [ref(phpipam)]

    @action
    def __install__():

        CalmTask.Exec.ssh(
            name="ConfigureBaseVM",
            filename=os.path.join(
                "scripts",
                "Package_PackageInstall_Action___install___Task_ConfigureBaseVM.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(phpipam),
        )
        CalmTask.Exec.ssh(
            name="InstallPackages",
            filename=os.path.join(
                "scripts",
                "Package_PackageInstall_Action___install___Task_InstallPackages.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(phpipam),
        )
        CalmTask.Exec.ssh(
            name="SetupPHPipam",
            filename=os.path.join(
                "scripts",
                "Package_PackageInstall_Action___install___Task_SetupPHPipam.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(phpipam),
        )
        CalmTask.Exec.ssh(
            name="MariaDBSecurity",
            filename=os.path.join(
                "scripts",
                "Package_PackageInstall_Action___install___Task_MariaDBSecurity.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(phpipam),
        )
        CalmTask.Exec.ssh(
            name="phpipaminstall",
            filename=os.path.join(
                "scripts",
                "Package_PackageInstall_Action___install___Task_phpipaminstall.sh",
            ),
            cred=ref(BP_CRED_CENTOS),
            target=ref(phpipam),
        )


class ec00a041_deployment(Deployment):

    min_replicas = "1"
    max_replicas = "1"
    default_replicas = "1"

    packages = [ref(PackageInstall)]
    substrate = ref(Ipadressmanagment)


class Default(Profile):

    deployments = [ec00a041_deployment]


class PHPIPAM(Blueprint):

    services = [phpipam]
    packages = [PackageInstall]
    substrates = [Ipadressmanagment]
    profiles = [Default]
    credentials = [BP_CRED_CENTOS]
